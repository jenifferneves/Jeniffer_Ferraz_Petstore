Plano de Teste

Plano de Teste para API Petstore

1. Introdução
A API Petstore é uma API de exemplo amplamente utilizada para demonstrar e testar funcionalidades relacionadas à gestão de pet shops. Ela oferece operações para gerenciar animais de estimação (pets), usuários e pedidos. Este plano de teste tem como objetivo avaliar a qualidade e confiabilidade das funcionalidades da API, garantindo que o sistema responda adequadamente às operações realizadas por seus usuários. A API Petstore foi escolhida por oferecer uma ampla gama de operações CRUD (Create, Read, Update, Delete) e exemplos de permissões.

2. Objetivo
O principal objetivo deste plano de teste é assegurar que a API Petstore funcione de forma confiável e consistente, garantindo que:
	• As funcionalidades atendam aos requisitos esperados e ofereçam uma experiência satisfatória aos usuários.
	• As respostas da API sigam os padrões de códigos de status HTTP apropriados.
	• A segurança e as permissões de usuários estejam devidamente configuradas.
	• A performance das operações seja estável, com tempos de resposta dentro dos limites aceitáveis.
	
3. Escopo
Este plano de teste cobre funcionalidades essenciais da API Petstore, incluindo:
	• Cadastro e autenticação de usuários.
	• Gerenciamento de informações sobre pets (criação, consulta, atualização e exclusão).
	• Realização de pedidos para gestão de compras.
	• Operações de busca e filtros para melhorar a experiência do usuário.
	
4. Estratégia de Teste
A abordagem de teste inclui testes manuais e automatizados:

	1. Testes Manuais:
		· Realização de testes exploratórios e validação inicial para identificar falhas básicas.
		
	2. Testes Automatizados:
		· Desenvolvimento de scripts automatizados para garantir a correta implementação das operações CRUD.
		· Testes de carga e desempenho para avaliar a estabilidade e eficiência da API.
		
5. Pessoas Envolvidas
	• Analista de Testes
	• Desenvolvedor da API
	• Gerente de Qualidade
	
6. Priorização de Teste

	1. Alta Prioridade:
		· Cadastro e autenticação de usuários (incluindo gestão de tokens).
		· Criação, consulta, atualização e exclusão de pets.
		· Realização e cancelamento de pedidos.
		
	2. Média Prioridade:
		· Atualização e exclusão de usuários.
		· Gerenciamento de permissões de usuários e operações administrativas.
		
	3. Baixa Prioridade:
		· Operações de consulta e filtros para pets e pedidos.
		
7. Candidatos para Automação
Os seguintes casos de teste serão automatizados devido à sua importância e repetitividade:
	• Autenticação de usuários e renovação de tokens.
	• Criação, listagem e atualização de informações sobre pets.
	• Realização e cancelamento de pedidos.
	• Validação de consistência de dados após operações simultâneas.
	
8. Local dos Testes
Os testes serão realizados em um ambiente remoto, utilizando uma infraestrutura de desenvolvimento controlada para a API Petstore. Um servidor de teste (local ou na nuvem) será configurado para assegurar a integridade dos dados e o controle das operações.

9. Recursos Necessários

	• Ambiente:
		· Ambiente de teste isolado e configurado para a API Petstore.
		
	• Ferramentas de Teste:
		· Postman: Para testes manuais e automação inicial.
		· Newman: Para execução de coleções automatizadas do Postman.
		· Supertest (ou Mocha + Chai): Para testes unitários e validação detalhada das respostas da API.
		· JMeter: Para testes de carga e desempenho.
		· Jira: Para acompanhamento e gerenciamento das tarefas de teste.
		· Xmind: Para a criação de mapas mentais das funcionalidades da API.
		
	• Conexão:
		· Internet estável para comunicação com o servidor de teste.
		
	• Dados de Teste:
		· Conjunto de dados contendo informações sobre usuários, pets e pedidos.
		
10. Critérios de Aceitação

	• Cadastro e autenticação de usuários: A API deve permitir o cadastro de novos usuários e autenticação com token para usuários já cadastrados.
	
	• Operações de Pets e Permissões: Somente administradores devem poder cadastrar, atualizar e excluir informações sobre pets.
	
	• Status de Resposta: A API deve responder com os códigos de status apropriados (200 para sucesso, 401 para não autorizado, 403 para proibição, etc.).
	
	• Tempo de Resposta: O tempo de resposta para operações padrão deve ser inferior a 2 segundos.

11. Riscos
	• Falta de Documentação Completa da API: A ausência de documentação detalhada pode dificultar a criação de testes abrangentes.
	
	• Ambiente de Teste Limitado: A execução de muitos testes simultâneos pode sobrecarregar o ambiente, afetando os resultados de desempenho.
	
	• Inconsistência de Dados: Falhas em transações simultâneas, como operações de pedidos, podem comprometer os dados durante os testes.
	
12. Como os Resultados dos Testes Serão Divulgados
	• Relatório Diário: Durante os testes, relatórios diários serão gerados e enviados para as partes interessadas, detalhando o progresso e os defeitos encontrados.
	
	• Relatório Final: Ao término dos testes, um relatório final será gerado, incluindo:
		· Resultados das funcionalidades testadas.
		· Número de falhas e sucessos.
		· Problemas críticos e sugestões de correções.
		· Comparativo entre a versão inicial e a versão final após as correções.

13. Cronograma
FASE	                 DESCRIÇÃO	                                    DURAÇÃO ESTIMADA
Planejamento	         Definir escopo, ferramentas, dados de teste	2 dias
Configuração	         Configuração do ambiente e ferramentas      	2 dias
Teste Manual	         Execução dos testes manuais iniciais	        3 dias
Automação de Testes	     Criar e executar scripts automáticos	        3 dias
Teste de Regressão	     Reexecutar testes após correções	            2 dias
Análise de Resultados    Geração e análise do relatório final	        1 dia
Fase Final	             Tempo Total	                                13 dias

14. Observações Complementares

	• Testar com diferentes perfis de usuário (admin e comum) para assegurar a aplicação correta das permissões.
	• Garantir que os dados sensíveis não sejam exibidos nas respostas.
	• Considerar cenários de carga para verificar a estabilidade da API em uso intensivo.
